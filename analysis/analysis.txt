Ethan Shen
es321
Jenny Huang
jlh165

Questions here will come from the assignment
writeup. Be sure to copy paste questions and 
your explanations before you push to GitHub and
do that before uploading to Gradescope

Question 1: are the benchmark timings for StringStrand 
consistent with the explanation below that the time to execute 
cutAndSplice is O(b^2S)? 

Note that the value of b is half the number of calls to append since each cut (except the first) is modeled by two calls of append in the method cutAndSplice -- see the code. 
This means that b^2 will be constant in the benchmark, but S will vary. 

Given that b^2 is constant, when looking at the timing below, we see that the time approximately doubles as the splicee count doubles. This is because
there is a linear relationship between the length of the splicee and the time.  


dna length = 4,639,221
cutting at enzyme gaattc
-----
Class	                splicee	      recomb	time	appends
-----
StringStrand:	            256	      4,800,471	0.566	1290
StringStrand:	            512	      4,965,591	0.556	1290
StringStrand:	          1,024	      5,295,831	0.557	1290
StringStrand:	          2,048	      5,956,311	0.664	1290
StringStrand:	          4,096	      7,277,271	0.866	1290
StringStrand:	          8,192	      9,919,191	1.241	1290
StringStrand:	         16,384	     15,203,031	1.944	1290
StringStrand:	         32,768	     25,770,711	3.527	1290
StringStrand:	         65,536	     46,906,071	6.713	1290
StringStrand:	        131,072	     89,176,791	13.019	1290
StringStrand:	        262,144	    173,718,231	25.617	1290
StringStrand:	        524,288	    342,801,111	48.613	1290
StringStrand:	      1,048,576	    680,966,871	91.465	1290
StringStrand:	      2,097,152	  1,357,298,391	171.221	1290

Question 2: are the benchmark timings for StringBuilderStrand 
consistent with the explanation below that the time to execute 
cutAndSplice is O(bS)? 

Given that b is constant, when looking at the timing below, we see that the time approximately doubles as the splicee count doubles. This is because
there is a linear relationship between the length of the splicee and the time. 

dna length = 4,639,221
cutting at enzyme gaattc
-----
Class	                splicee	      recomb	time	appends
-----
StringBuilderStrand:	            256	      4,800,471	0.030	1290
StringBuilderStrand:	            512	      4,965,591	0.025	1290
StringBuilderStrand:	          1,024	      5,295,831	0.011	1290
StringBuilderStrand:	          2,048	      5,956,311	0.013	1290
StringBuilderStrand:	          4,096	      7,277,271	0.009	1290
StringBuilderStrand:	          8,192	      9,919,191	0.011	1290
StringBuilderStrand:	         16,384	     15,203,031	0.018	1290
StringBuilderStrand:	         32,768	     25,770,711	0.031	1290
StringBuilderStrand:	         65,536	     46,906,071	0.035	1290
StringBuilderStrand:	        131,072	     89,176,791	0.117	1290
StringBuilderStrand:	        262,144	    173,718,231	0.222	1290
StringBuilderStrand:	        524,288	    342,801,111	0.351	1290

Question 3: Explain why the time for LinkStrand does not change 
much at all over all the runs in the benchmark program. 
Explain why you think memory is exhausted at the specific 
strand size you see in your timings -- as compared to exhaustion for
String and StringBuilder. 

The number of splicee's doesn't matter, so it just looks at the number of appends. Since the number of appends is the same for each splicee, the timings are about the same. 
In LinkStrand, LinkStrand.append is O(1), so the time should be constant. 

There is a limit on how much memory can be stored before there is an error. The memory limit is reached earlier in StringStrand and StringBuilderStrand
because the DNA strand grows too long. The memory limit for LinkStrand occurs later because the LinkStrand class uses pointers and references 
to refer to the same splicee object, so the length of the DNA strand does not increase. 

dna length = 4,639,221
cutting at enzyme gaattc
-----
Class	                splicee	      recomb	time	appends
-----
LinkStrand:	            256	      4,800,471	0.028	1290
LinkStrand:	            512	      4,965,591	0.021	1290
LinkStrand:	          1,024	      5,295,831	0.008	1290
LinkStrand:	          2,048	      5,956,311	0.004	1290
LinkStrand:	          4,096	      7,277,271	0.004	1290
LinkStrand:	          8,192	      9,919,191	0.007	1290
LinkStrand:	         16,384	     15,203,031	0.004	1290
LinkStrand:	         32,768	     25,770,711	0.004	1290
LinkStrand:	         65,536	     46,906,071	0.004	1290
LinkStrand:	        131,072	     89,176,791	0.006	1290
LinkStrand:	        262,144	    173,718,231	0.004	1290
LinkStrand:	        524,288	    342,801,111	0.004	1290
LinkStrand:	      1,048,576	    680,966,871	0.005	1290
LinkStrand:	      2,097,152	  1,357,298,391	0.003	1290
LinkStrand:	      4,194,304	  2,709,961,431	0.008	1290
LinkStrand:	      8,388,608	  5,415,287,511	0.004	1290
LinkStrand:	     16,777,216	 10,825,939,671	0.003	1290
LinkStrand:	     33,554,432	 21,647,243,991	0.005	1290
LinkStrand:	     67,108,864	 43,289,852,631	0.006	1290
LinkStrand:	    134,217,728	 86,575,069,911	0.006	1290
LinkStrand:	    268,435,456	173,145,504,471	0.007	1290
LinkStrand:	    536,870,912	346,286,373,591	0.011	1290
LinkStrand:	  1,073,741,824	692,568,111,831	0.005	1290
